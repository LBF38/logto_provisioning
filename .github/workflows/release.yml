name: Release
on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: stable
      - uses: golangci/golangci-lint-action@v4
  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: stable
      - run: go test -v ./...
  release:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: Check new version using svu
        id: svu
        run: |
          go install github.com/caarlos0/svu/v3@latest
          NEXT_VERSION=$(svu next)
          CURRENT_VERSION=$(svu current)
          if [ "$NEXT_VERSION" == "$CURRENT_VERSION" ]; then
            echo "new_version=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "new_version=true" >> $GITHUB_OUTPUT
          git tag "$NEXT_VERSION"
          git push --tags
      - name: Run GoReleaser
        if: ${{steps.svu.outputs.new_version == true}}
        uses: goreleaser/goreleaser-action@v6
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          # 'latest', 'nightly', or a semver
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution
          # GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
